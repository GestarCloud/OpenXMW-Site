import{_ as n,X as s,Y as a,a2 as e}from"./framework-4849facd.js";const t={},p=e(`<h1 id="编写插件" tabindex="-1"><a class="header-anchor" href="#编写插件" aria-hidden="true">#</a> 编写插件</h1><p>（需要一定Python基础，若无能力可使用他人插件或请人代写）</p><h2 id="插件概念" tabindex="-1"><a class="header-anchor" href="#插件概念" aria-hidden="true">#</a> 插件概念</h2><p>插件本质上是一个Python指令集，一个插件文件内有一个或多个Python函数，且允许存在包含函数的自定义类。</p><h2 id="插件运行原理" tabindex="-1"><a class="header-anchor" href="#插件运行原理" aria-hidden="true">#</a> 插件运行原理</h2><p>当Scratch作品向OpenXMW发送指令、参数时，信息将会被监听作品的<code>core</code>接收并被解析为一条指令和一个包含参数的字典，随后指令名称对应的插件中的指定函数会被运行，同时参数将会被传递给函数，函数的返回值将会由<code>core</code>上传至作品云列表中，以供作品使用。</p><h2 id="具体编写操作" tabindex="-1"><a class="header-anchor" href="#具体编写操作" aria-hidden="true">#</a> 具体编写操作</h2><p>新建一个<code>.py</code>文件，文件中定义一个函数，<strong>仅接收一个类型为字典的参数，并返回一个字典</strong>。</p><p>下面是一个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> 合并字符串<span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">&quot;合并结果&quot;</span> <span class="token punctuation">:</span> 参数<span class="token punctuation">[</span><span class="token string">&quot;字符串1&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> 参数<span class="token punctuation">[</span><span class="token string">&quot;字符串2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数需使用“插件文件名.合并字符串”调用，接收一个含有两个键（即“字符串1”和“字符串2”）的字典，返回一个仅有一个键（即“合并结果”）的字典。</p><p>当然，也可以在文件中定义一个类，类中包含一个或多个仅接收一个类型为字典的参数、返回一个字典的函数。</p><p>下面是一个例子：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">httpio</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">requestsGet</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">from</span> requests <span class="token keyword">import</span> get
        <span class="token keyword">return</span> get<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>headers <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">&quot;headers&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此函数需使用“文件名.httpio.requestsGet”调用。</p><p>编写好后，将文件置于<code>.\\plugins\\files</code>文件夹下并修改<code>.\\plugins\\__init__.py</code>即可启用插件。你可以将自己编写的插件上传至OpenXMW插件中心以分享给他人使用。</p><p>如果你的插件不仅仅是给自己用的，请向你的用户说明插件所包含的具体指令名称、功能、参数格式、响应格式等并解释具体使用方法。</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><p>如果你希望保护插件源码使其不至于轻易泄露，请将你的插件程序从<code>*.py</code>文件编译至<code>*.pyc</code>文件，但请确保编译环境为Python 3.7，否则可能无法正常使用。</p><p>使用OpenXMW示例作品中的自定义积木「封装参数」时，从Scratch作品接收的字典的键和值的类型<strong>均为字符串</strong>，且插件返回的字典<strong>也应如此</strong>，因为自定义积木「解析响应」要求被解析的字典的键和值的类型均为字符串。</p><p>依赖库应在<strong>被调用的函数内</strong>被导入，而不是在函数外。如果插件需要安装依赖库，应注意<strong>提醒插件用户</strong>安装。</p><p>编写插件时应尽量防范插件文件名与其它插件文件名冲突。</p><p>不提倡使用OpenXMW传输隐私信息等，因为通过小码王云列表传输的信息可能会在传输时被某些人通过违规手段获取或篡改等。</p><p>若发现OpenXMW程序本身存在问题或漏洞，<strong>请私下反馈而不是公布</strong>，我们会尽快修改。</p>`,24),o=[p];function c(r,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","write-plugins.html.vue"]]);export{d as default};
